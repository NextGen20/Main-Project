
/* groovylint-disable-next-line CompileStatic, NglParseError */
pipeline {
    agent {
        label 'slave'
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', url: 'https://github.com/NextGen20/Main-Project.git'
            }
        }

        stage('Build & Run Image') {
            steps {
                script {
                    env.VERSION = "1.0.${env.BUILD_NUMBER}"
                    sh "sudo docker build -t porto23/flaskproject:flask_app-${env.VERSION} ./first-app"
                    sh 'sudo docker run --name flaskapp1 -d -p 5000:5000 flaskproject/myproject:latest'
                }
            }
        }
       
        stage('Test-App') {
            steps {
                dir('first-app/test_app') {
                    sh 'pytest test_app.py'
                }
            }
        }
        stage('AWS S3 Upload') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                    s3Upload(bucket: 'jenkins-sqlabs-amitb', path: 'project1/', includePathPattern: '**/test.log'
                    , workingDir: '/home/ubuntu/workspace/test-docker-2/first-app/test_app')
                // withAWS(credentials: 'aws-key', region: 'us-east-1') {
                // // sh "aws dynamodb put-item --table-name result --item '{\"log\": {\"S\": \"$}"
                // }
                }
            }
        }
        stage('DynamoDB Item Insertion') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                      sh '''
                        logContent=$(cat test.log)
                        aws dynamodb put-item --table-name TestLogs --item "{\"LogId\": {\"S\": \"test.log\"}, \"LogContent\": {\"S\": \"$logContent\"}}"
                    '''
                    // sh 'aws dynamodb put-item --table-name TestLogs --item \'{"LogId": {"S": "test.log"}}\''
                }
            }
        }
        
        // stage('DynamoDB Item Insertion') {
        //     steps {
        //         withAWS(credentials: 'aws-key', region: 'us-east-1') {
        //             sh 'aws dynamodb put-item --table-name TestLogs --item \'{"LogId": {"S": "test.log"}}\''
        //         }
        //     }
        // }
        stage('PUSH-To-DOCKERHUB') {
            steps {
                sh 'sudo docker login -u porto23 -p Amit29789'
                sh "sudo docker push porto23/flaskproject:flask_app-${env.VERSION}"
            }
        }
    }
        post {
            always {
                sh 'sudo docker stop $(sudo docker ps -aq)'
                sh 'sudo docker rm $(sudo docker ps -aq)'
            }
        }
}
